/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()



/* Storage Slots */
#define constant balanceOfSlot = FREE_STORAGE_POINTER()



#define macro BALANCEOF() = takes (0) returns (0) {
    0x04
    calldataload
    0x00
    mstore
    [balanceOfSlot]
    0x20
    mstore
    0x40
    0x00  
    sha3
    sload
    0x00
    mstore
    0x20
    0x00
    return
}

#define macro SETBALANCE() = takes (0) returns (0) {
    callvalue
    caller
    0x00
    mstore
    [balanceOfSlot]
    0x20
    mstore
    0x40
    0x00
    sha3
    sstore
}




#define macro SENDBALANCE() = takes (0) returns (0) {
    0x04
    calldataload
    dup1
    caller
    0x00
    mstore
    [balanceOfSlot]
    0x20
    mstore
    0x40
    0x00
    sha3
    dup1
    sload
    swap2
    dup3
    lt
    iszero
    sendETH
    jumpi

    0x00 0x00 revert

    sendETH:
        swap2
        dup1
        swap2
        sub
        swap1
        swap2
        sstore
        0x00
        0x00
        0x00
        0x00
        swap4
        caller
        gas
        call
        isDone
        jumpi
        0x00 0x00 revert
        isDone:


}



#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(balanceOf) eq getBalance jumpi
    dup1 __FUNC_SIG(withdraw) eq sendBalance jumpi

    SETBALANCE()

    getBalance:
        BALANCEOF()

    sendBalance:
        SENDBALANCE()
}
