 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function distribute(address[]) payable returns()


#define macro DISTRIBUTE() = takes (0) returns (0) {
    //stored length of array as 0x00
    0x04
    calldataload
    0x04 
    add
    calldataload
    0x00
    mstore

    //return if length is zero
    0x00
    mload
    0x00
    eq
    justRevert
    jumpi

    //store if offset from where Items starts at 0x20
    0x04
    calldataload
    0x24
    add
    0x20
    mstore

    //store amount to distribute at 0x40
    0x04
    calldataload
    0x04 
    add
    calldataload
    callvalue
    div
    0x40
    mstore

    Loop:
        //if length is zero then return loop and return data
        0x00
        mload
        0x00
        eq
        CallDone
        jumpi

        //Store the sum of item at 0x40 but stack still contains location of current offset which we will update
        0x00 0x00 0x00 0x00
        0x40
        mload
        0x20
        mload
        calldataload
        gas
        call
        
        //offset updated at 0x20
        0x20
        mload
        0x20
        add
        0x20
        mstore

        //Updating the length
        0x01
        0x00
        mload
        sub
        0x00
        mstore


        //Enter the loop again
        Loop
        jump 

    CallDone:
        0x20
        0x40
        return
    justRevert:
        0x00 0x00 revert
}

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(distribute) eq dp jumpi
    0x00 0x00 revert
    dp:
        DISTRIBUTE()

 }