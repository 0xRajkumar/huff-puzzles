
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)


#define macro SUMARRAY() = takes (0) returns (0) {
    //stored length of array as 0x00
    0x04
    calldataload
    0x04 
    add
    calldataload
    0x00
    mstore

    // //return if length is zero
    // 0x00
    // mload
    // 0x00
    // eq
    // CallDone
    // jumpi

    //store if offset from where Items starts at 0x20
    0x04
    calldataload
    0x24
    add
    0x20
    mstore

    Loop:
        //Update the if length is zero then return loop and return data
        0x00
        mload
        0x00
        eq
        CallDone
        jumpi



        //Store the sum of item at 0x40 but stack still contains location of current offset which we will update
        0x20
        mload
        dup1
        calldataload
        0x40
        mload
        add
        0x40
        mstore
        
        //offset updated at 0x20
        0x20
        add
        0x20
        mstore

        //Updating the length
        0x01
        0x00
        mload
        sub
        0x00
        mstore


        //Enter the loop again
        Loop
        jump 

    CallDone:
        0x20
        0x40
        return
}


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(sumArray) eq sumArr jumpi
    0x00 0x00 revert
    sumArr:
        SUMARRAY()
}